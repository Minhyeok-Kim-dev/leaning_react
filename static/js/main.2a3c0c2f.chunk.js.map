{"version":3,"sources":["logo.svg","chapter6/Summary.js","chapter6/AddColorForm.js","chapter6/Star.js","chapter6/StarRating.js","chapter6/Chapter6.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Summary","this","props","ingredients","steps","title","className","length","Component","defaultProps","Star","selected","onClick","f","StarRating","state","starsSelected","change","bind","setState","totalStars","Array","map","n","i","key","Chapter6","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kKAAAA,EAAOC,QAAU,IAA0B,kC,uJCIrCC,G,6LAmBM,IAAD,EAC6BC,KAAKC,MAAlCC,EADA,EACAA,YAAaC,EADb,EACaA,MAAOC,EADpB,EACoBA,MAC3B,OACE,yBAAKC,UAAU,WACb,4BAAKD,GACL,2BACE,8CAAUF,EAAYI,OAAtB,oBACA,wCAASH,EAAMG,OAAf,uB,GA1BYC,cAAhBR,EAaGS,aAAe,CACpBN,YAAa,EACbC,MAAO,EACPC,MAAO,kBAmCIL,I,UCrDYQ,Y,MCCrBE,E,iLAWM,IAAD,EACqBT,KAAKC,MAA1BS,EADA,EACAA,SAAUC,EADV,EACUA,QACjB,OACE,yBAAKN,UAAaK,EAAY,gBAAkB,OAAQC,QAAWA,Q,GAdtDJ,aAAbE,EAMGD,aAAe,CACpBE,UAAU,EACVC,QAAS,SAAAC,GAAC,OAAIA,IAYHH,QCnBTI,E,YACJ,WAAYZ,GAAQ,IAAD,8BACjB,4CAAMA,KACDa,MAAQ,CACXC,cAAed,EAAMc,eAAiB,GAExC,EAAKC,OAAS,EAAKA,OAAOC,KAAZ,gBALG,E,oEAQZF,GACLf,KAAKkB,SAAS,CAACH,oB,2CAGK,IACZA,EAAkBf,KAAKC,MAAvBc,cACLA,GACDf,KAAKkB,SAAS,CAACH,oB,+BAIT,IAAD,OACAI,EAAcnB,KAAKC,MAAnBkB,WACAJ,EAAiBf,KAAKc,MAAtBC,cAEP,OACE,yBAAKV,UAAU,eAEX,YAAIe,MAAMD,IAAaE,KAAI,SAACC,EAAGC,GAAJ,OACzB,kBAAC,EAAD,CAAMC,IAAKD,EAAGb,SAAUa,EAAER,EAAeJ,QAAS,kBAAM,EAAKK,OAAOO,EAAE,SAG1E,6BACA,4CACOR,EADP,MACyBI,Q,GAjCRZ,aA4CzBM,EAAWL,aAAe,CACxBW,WAAY,GAGCN,QCxBAY,G,uLAhBX,OAWE,kBAAC,EAAD,CAAYN,WAAY,EAAGJ,cAAe,Q,GAbzBR,cCaRmB,GAhBInB,Y,iLAUf,OACE,kBAAC,EAAD,U,GAHYA,cCHEoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.2a3c0c2f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\n// ES6 클래스\r\nclass Summary extends Component{\r\n  // 정적 프로퍼티 사용\r\n  static propTypes = {\r\n    ingredients: PropTypes.array.isRequired,\r\n    steps: PropTypes.array.isRequired,\r\n    title: (props, propName) =>\r\n      (typeof props[propName] !== 'string') ?\r\n        new Error(\"제목(title)은 문자열이여야 합니다.\") :\r\n        (props[propName].length > 20) ?\r\n          new Error(\"제목은 20자 이내여야 합니다.\") :\r\n          null\r\n  }\r\n\r\n  static defaultProps = {\r\n    ingredients: 0,\r\n    steps: 0,\r\n    title: \"[무제]\"\r\n  }\r\n\r\n  render() {\r\n    const {ingredients, steps, title} = this.props\r\n    return(\r\n      <div className=\"summary\">\r\n        <h1>{title}</h1>\r\n        <p>\r\n          <span>재료 {ingredients.length} 종류 | </span>\r\n          <span>총 {steps.length} 단계</span>\r\n        </p>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n// 함수 외부 프로퍼티 사용\r\n// Summary.propTypes = {\r\n//   ingredients: PropTypes.array.isRequired,\r\n//   steps: PropTypes.array.isRequired,\r\n//   title: (props, propName) =>\r\n//     (typeof props[propName] !== 'string') ?\r\n//       new Error(\"제목(title)은 문자열이여야 합니다.\") :\r\n//       (props[propName].length > 20) ?\r\n//         new Error(\"제목은 20자 이내여야 합니다.\") :\r\n//         null\r\n// };\r\n\r\n// Summary.defaultProps = {\r\n//   ingredients: 0,\r\n//   steps: 0,\r\n//   title: \"[무제]\"\r\n// }\r\n\r\nexport default Summary","import React, { Component } from 'react'\r\n\r\nclass AddColorForm extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.submit = this.submit.bind(this)\r\n  }\r\n\r\n  submit(e) {\r\n    e.preventDefault()\r\n    const { _title, _color } = this.refs\r\n\r\n    alert(`새로운 색: ${_title.value} ${_color.value}`)\r\n    _title.value = ''\r\n    _color.value = '#000000'\r\n    _title.focus()\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.submit}>\r\n        <input ref=\"_title\" type=\"text\" placeholder=\"색 이름...\" required />\r\n        <input ref=\"_color\" type=\"color\" required />\r\n        <button>추가</button>\r\n      </form>\r\n    )\r\n  }\r\n}\r\n\r\nexport default AddColorForm","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nclass Star extends Component {\r\n  static propTypes = {\r\n    selected: PropTypes.bool,\r\n    onClick: PropTypes.func\r\n  }\r\n\r\n  static defaultProps = {\r\n    selected: false,\r\n    onClick: f => f\r\n  }\r\n\r\n  render() {\r\n    const {selected, onClick} = this.props\r\n    return (\r\n      <div className= {(selected) ? \"star selected\" : \"star\"} onClick = {onClick}>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Star","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Star from './Star'\r\n\r\nclass StarRating extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      starsSelected: props.starsSelected || 0\r\n    }\r\n    this.change = this.change.bind(this)\r\n  }\r\n  \r\n  change(starsSelected) {\r\n    this.setState({starsSelected})\r\n  }\r\n\r\n  componentWillMount() {\r\n    const { starsSelected } = this.props\r\n    if(starsSelected) {\r\n      this.setState({starsSelected})\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const {totalStars} = this.props\r\n    const {starsSelected} = this.state \r\n\r\n    return (\r\n      <div className=\"star-rating\">\r\n        {\r\n          [...Array(totalStars)].map((n, i) =>\r\n            <Star key={i} selected={i<starsSelected} onClick={() => this.change(i+1)} />\r\n          )\r\n        }\r\n        <br />\r\n        <p>\r\n          별점: {starsSelected} / {totalStars}\r\n        </p>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nStarRating.propTypes = {\r\n  totalStars: PropTypes.number\r\n}\r\n\r\nStarRating.defaultProps = {\r\n  totalStars: 5\r\n}\r\n\r\nexport default StarRating","import React, { Component } from 'react'\r\nimport Summary from './Summary'\r\nimport Summary2 from './Summary2'\r\nimport AddColorForm from './AddColorForm'\r\nimport AddColorForm2 from './AddColorForm2'\r\nimport Star from './StarRating'\r\nimport StarRating from './StarRating'\r\n\r\nimport './Chapter6.css';\r\n\r\nclass Chapter6 extends Component {\r\n  render() {\r\n    return (\r\n      //<Summary />\r\n      // <Summary title=\"tsefsefsefesfsefdsfesfskfjdlf\" \r\n      //   ingredients=\"땅콩버터, 젤리, 식빵\"\r\n      //   steps=\"만들어\" />\r\n  \r\n      // <AddColorForm />\r\n      // <AddColorForm2 onNewColor={(title, color) => {\r\n      //   console.log(`${title} // ${color}`)\r\n      // }}/>\r\n\r\n      <StarRating totalStars={7} starsSelected={3}/>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Chapter6","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport Chapter6 from './chapter6/Chapter6'\n\n\nclass Test extends Component {\n  render() {\n    return (\n      <h1>야호</h1>\n    )\n  }\n}\n\nclass App extends Component {\n  render() {\n    return(\n      <Chapter6 />\n    )\n  } \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}