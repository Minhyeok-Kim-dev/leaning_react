{"version":3,"sources":["logo.svg","chapter8/constants.js","chapter8/reducers.js","chapter8/chapter8.js","chapter8/actionMaker.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","constants","SORT_COLORS","ADD_COLOR","RATE_COLOR","REMOVE_COLOR","color","state","action","type","C","id","title","rating","timestamp","colors","map","c","filter","sort","sortBy","Chapter8","sortedBy","store","createStore","combineReducers","localStorage","JSON","parse","subscribe","stringify","getState","console","log","dispatch","v4","Date","toString","compose","list","join","bind","print","App","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"6JAAAA,EAAOC,QAAU,IAA0B,kC,iLCO5BC,EAPG,CAChBC,YAAa,cACbC,UAAW,YACXC,WAAY,aACZC,aAAc,gBCFHC,EAAQ,WAAyB,IAAxBC,EAAuB,uDAAf,GAAIC,EAAW,uCAC3C,OAAQA,EAAOC,MACb,KAAKC,EAAEP,UACL,MAAO,CACLQ,GAAIH,EAAOG,GACXC,MAAOJ,EAAOI,MACdN,MAAOE,EAAOF,MACdO,OAAQL,EAAOK,OACfC,UAAWN,EAAOM,WAEtB,KAAKJ,EAAEN,WACL,OAAQG,EAAMI,KAAOH,EAAOG,GAC1BJ,EADK,eAGAA,EAHA,CAIHM,OAAQL,EAAOK,SAErB,QACE,OAAON,IAIAQ,EAAS,WAAyB,IAAxBR,EAAuB,uDAAf,GAAIC,EAAW,uCAC5C,OAAQA,EAAOC,MACb,KAAKC,EAAEP,UACL,MAAM,GAAN,mBACKI,GADL,CAEED,EAAM,GAAIE,KAEd,KAAKE,EAAEN,WACL,OAAOG,EAAMS,KACX,SAAAC,GAAC,OAAIX,EAAMW,EAAGT,MAElB,KAAKE,EAAEL,aACL,OAAOE,EAAMW,QACX,SAAAD,GAAC,OAAIA,EAAEN,KAAOH,EAAOG,MAEzB,QACE,OAAOJ,IAIAY,EAAO,WAAuC,IAAtCZ,EAAqC,uDAA7B,iBAAkBC,EAAW,uCACxD,OAAQA,EAAOC,MACb,KAAKC,EAAER,YACL,OAAOM,EAAOY,OAChB,QACE,OAAOb,I,iBC0DEc,EAtGE,WACf,ICYwBC,EAiBDV,EAAON,EDDxBiB,EAAQC,YACZC,YAAgB,CAAEV,SAAQI,SAKzBO,aAAY,OACXC,KAAKC,MAAMF,aAAY,QACvB,IA4DJ,OAhDAH,EAAMM,WAAU,WAEdH,aAAY,OAAaC,KAAKG,UAAUP,EAAMQ,YATzBC,QAAQC,IAAI,gBAAiBV,EAAMQ,eAqB1DR,EAAMW,SAAS,CACbzB,KAAM,YACNE,GAAI,MACJC,MAAO,QACPN,MAAO,UACPO,OAAQ,EACRC,UAAW,aAIbS,EAAMW,SAAS,CACbzB,KAAM,aACNE,GAAI,MACJE,OAAQ,IAKVU,EAAMW,SCjFL,CACCzB,KAAMC,EAAEL,aACRM,GD+EqC,QACvCY,EAAMW,SCpEQ,YADUZ,EDqEc,UCnEnC,CACCb,KAAMC,EAAER,YACRkB,OAAQ,oBAEI,UAAbE,EACE,CACCb,KAAMC,EAAER,YACRkB,OAAQ,mBAET,CACCX,KAAMC,EAAER,YACRkB,OAAQ,mBDyDdG,EAAMW,UCrDiBtB,EDqDa,UCrDNN,EDqDiB,UCpD9C,CACCG,KAAMC,EAAEP,UACRQ,GAAIwB,MACJvB,QACAN,QACAQ,WAAW,IAAIsB,MAAOC,cDmDVC,aACZ,SAAAC,GAAI,OAAIP,QAAQC,IAAIM,MACpB,SAAA3B,GAAK,OAAIA,EAAM4B,KAAK,SACpB,SAAAxB,GAAG,OAAIA,GAAI,SAAAC,GAAC,OAAIA,EAAEL,YAClB,SAAAG,GAAM,OAAIA,EAAOC,IAAIyB,KAAK1B,MAC1B,SAAAR,GAAK,OAAIA,EAAMQ,SAGjB2B,CAAMnB,EAAMQ,YAGV,sCE5EWY,GAlBIC,Y,iLAUf,OAGE,kBAAC,EAAD,U,GALYA,cCLEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7B,QAAQ6B,MAAMA,EAAMC,c","file":"static/js/main.ac7725e4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","const constants = {\r\n  SORT_COLORS: \"SORT_COLORS\",\r\n  ADD_COLOR: \"ADD_COLOR\",\r\n  RATE_COLOR: \"RATE_COLOR\",\r\n  REMOVE_COLOR: \"REMOVE_COLOR\"\r\n}\r\n\r\nexport default constants","import C from './constants'\r\n\r\nexport const color = (state = {}, action) => {\r\n  switch (action.type) {\r\n    case C.ADD_COLOR:\r\n      return {\r\n        id: action.id,\r\n        title: action.title,\r\n        color: action.color,\r\n        rating: action.rating,\r\n        timestamp: action.timestamp\r\n      }\r\n    case C.RATE_COLOR:\r\n      return (state.id !== action.id) ?\r\n        state :\r\n        {\r\n          ...state,\r\n          rating: action.rating\r\n        }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport const colors = (state = [], action) => {\r\n  switch (action.type) {\r\n    case C.ADD_COLOR:\r\n      return [\r\n        ...state,\r\n        color({}, action)\r\n      ]\r\n    case C.RATE_COLOR:\r\n      return state.map(\r\n        c => color(c, action)\r\n      )\r\n    case C.REMOVE_COLOR:\r\n      return state.filter(\r\n        c => c.id !== action.id\r\n      )\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport const sort = (state = \"SORTED_BY_DATE\", action) => {\r\n  switch (action.type) {\r\n    case C.SORT_COLORS:\r\n      return action.sortBy\r\n    default:\r\n      return state\r\n  }\r\n}","import React from 'react'\r\nimport { createStore, combineReducers, compose } from 'redux'\r\nimport { colors, sort } from './reducers'\r\nimport * as ActionMaker from './actionMaker'\r\n\r\nconst Chapter8 = () => {\r\n  const initialState = {\r\n    colors: [\r\n      {\r\n        id: \"111\",\r\n        title: \"red\",\r\n        color: \"#FF0000\",\r\n        rating: 3,\r\n        timestamp: \"20200101\"\r\n      },\r\n      {\r\n        id: \"222\",\r\n        title: \"blue\",\r\n        color: \"#00FF00\",\r\n        rating: 4,\r\n        timestamp: \"20200201\"\r\n      },\r\n      {\r\n        id: \"333\",\r\n        title: \"green\",\r\n        color: \"#0000FF\",\r\n        rating: 5,\r\n        timestamp: \"20200301\"\r\n      }\r\n    ],\r\n    sort: \"SORTED_BY_TITLE\"\r\n  }\r\n\r\n  //- store 생성 + 초기값 설정\r\n  const store = createStore(\r\n    combineReducers({ colors, sort }),\r\n    //- 초기값 설정\r\n    //initialState  \r\n\r\n    //- localStorage 사용\r\n    (localStorage['myData']) ?\r\n      JSON.parse(localStorage['myData']) :\r\n      {}\r\n  )\r\n  //console.log(store.getState())\r\n\r\n  //- store 구독으로 dispatch내용 통지받음\r\n  const logState = () => console.log(\"next state : \", store.getState())\r\n\r\n  //- 리스너 등록 \r\n  //const unsubscribeLogger = store.subscribe(logState)\r\n  //- 리스너 해제하고 싶을 때 재호출\r\n  //unsubscribeLogger() \r\n\r\n  store.subscribe(() => {\r\n    //- localStorage에 추가\r\n    localStorage['myData'] = JSON.stringify(store.getState())\r\n    //console.log(localStorage['myData'])\r\n\r\n    logState()\r\n  })\r\n\r\n\r\n  // store.subscribe(() => \r\n  //   console.log(store.getState())\r\n  // )\r\n\r\n  //- dispatch로 action 추가\r\n  store.dispatch({\r\n    type: \"ADD_COLOR\",\r\n    id: \"444\",\r\n    title: \"white\",\r\n    color: \"#FFFFFF\",\r\n    rating: 1,\r\n    timestamp: \"20200401\"\r\n  })\r\n  //console.log(store.getState())\r\n\r\n  store.dispatch({\r\n    type: \"RATE_COLOR\",\r\n    id: \"444\",\r\n    rating: 5\r\n  })\r\n  //console.log(store.getState())\r\n  \r\n  //- 액션 생성기를 통한 dispatch\r\n  store.dispatch(ActionMaker.removeColor(\"444\"))\r\n  store.dispatch(ActionMaker.sortColors(\"rating\"))\r\n  store.dispatch(ActionMaker.addColor(\"myColor\", \"#F0F0F0\"))\r\n\r\n  //- compose를 통한 함수 합성\r\n  //  맨 아래서부터 역순으로 진행됨\r\n  const print = compose(\r\n    list => console.log(list),\r\n    title => title.join(\", \"),\r\n    map => map(c => c.title),\r\n    colors => colors.map.bind(colors),\r\n    state => state.colors\r\n  )\r\n\r\n  print(store.getState())\r\n\r\n  return (\r\n    <h1>hello</h1>\r\n  )\r\n}\r\n\r\nexport default Chapter8","import C from './constants'\r\nimport v4 from 'uuid'\r\n\r\n//- 액션 생성기 리터럴 생성\r\nexport const removeColor = id =>\r\n  ({\r\n    type: C.REMOVE_COLOR,\r\n    id\r\n  })\r\n\r\n\r\nexport const rateColor = (id, rating) =>\r\n  ({\r\n    type: C.RATE_COLOR,\r\n    id,\r\n    rating\r\n  })\r\n\r\nexport const sortColors = sortedBy => \r\n  (sortedBy === \"rating\") ?\r\n    ({\r\n      type: C.SORT_COLORS,\r\n      sortBy: \"SORTED_BY_RATING\"\r\n    }) :\r\n    (sortedBy === \"title\") ?\r\n      ({\r\n        type: C.SORT_COLORS,\r\n        sortBy: \"SORTED_BY_TITLE\"\r\n      }) : \r\n      ({\r\n        type: C.SORT_COLORS,\r\n        sortBy: \"SORTED_BY_DATE\"\r\n      })\r\n\r\n//- 액션 로직 캡슐화\r\nexport const addColor = (title, color) =>\r\n  ({\r\n    type: C.ADD_COLOR,\r\n    id: v4(),\r\n    title,\r\n    color,\r\n    timestamp: new Date().toString()\r\n  })","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\n//import Chapter6 from './chapter6/Chapter6'\n//import Chapter7 from './chapter7/Chapter7'\nimport Chapter8 from './chapter8/chapter8';\n\n\nclass Test extends Component {\n  render() {\n    return (\n      <h1>야호</h1>\n    )\n  }\n}\n\nclass App extends Component {\n  render() {\n    return(\n      //<Chapter6 />\n      //<Chapter7 />\n      <Chapter8 />\n    )\n  } \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}